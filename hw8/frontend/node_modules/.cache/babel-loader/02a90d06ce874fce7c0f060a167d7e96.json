{"ast":null,"code":"var _jsxFileName = \"/Users/karnielaliao/Downloads/wp1101-main 3/hw9/frontend/src/Containers/App.js\",\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport useChatRoom from '../Hooks/useChatRoom';\nimport { useEffect, useState } from 'react';\nimport ChatRoom from './ChatRoom';\nimport SignIn from './SignIn';\nimport { useMutation } from '@apollo/react-hooks';\nimport { CREATE_CHATBOX_MUTATION, CREATE_MESSAGE_MUTATION, CLEAR_MESSAGE_MUTATION } from '../graphql/index';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StyledApp = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nwidth: 500px;\nmargin: auto;\n`;\n_c = StyledApp;\nconst LOCALSTORAGE_KEY = \"save-me\";\n\nfunction App() {\n  _s();\n\n  const savedMe = localStorage.getItem(LOCALSTORAGE_KEY);\n  const {\n    status,\n    setStatus,\n    displayStatus\n  } = useChatRoom();\n  const [me, setMe] = useState(savedMe || '');\n  const [body, setBody] = useState('');\n  const [signIn, setSignedIn] = useState(false);\n  const [newChatUser, setNewChatUser] = useState('');\n  const [activeKey, setActiveKey] = useState();\n  const [panes, setPanes] = useState([]);\n  const [showModal, setShowModal] = useState(false);\n  const [createChatBox] = useMutation(CREATE_CHATBOX_MUTATION);\n  const [createMessage] = useMutation(CREATE_MESSAGE_MUTATION);\n  const [clearMessage] = useMutation(CLEAR_MESSAGE_MUTATION);\n  useEffect(() => {\n    displayStatus(status);\n  }, [status]);\n  useEffect(() => {\n    if (signIn) {\n      localStorage.setItem(LOCALSTORAGE_KEY, me);\n    }\n  }, [signIn, me]);\n\n  const createChatRoom = async () => {\n    if (!me || !newChatUser) return;\n    const data = await createChatBox({\n      variables: {\n        name1: me,\n        name2: newChatUser\n      }\n    });\n    setShowModal(false);\n    setNewChatUser('');\n    const {\n      error,\n      data: {\n        createChatBox: {\n          name\n        }\n      }\n    } = data;\n\n    if (!error) {\n      const activeKey = name;\n      const newPanes = [...panes];\n      newPanes.push({\n        title: newChatUser,\n        key: activeKey,\n        unseen: 0\n      });\n      setStatus({\n        type: \"success\",\n        msg: \"ChatBox created\"\n      });\n      setPanes(newPanes);\n      setActiveKey(activeKey);\n    } else {\n      setStatus({\n        type: \"error\",\n        msg: \"Fail to create ChatBox\"\n      });\n      console.log(error);\n    }\n  };\n\n  const sendMessage = async msg => {\n    if (!activeKey) {\n      setStatus({\n        type: \"error\",\n        msg: \"No ChatBox selected\"\n      });\n      return;\n    }\n\n    const data = await createMessage({\n      variables: {\n        chatBoxName: activeKey,\n        sender: me,\n        body: msg\n      }\n    });\n    const {\n      error\n    } = data;\n\n    if (!error) {\n      setStatus({\n        type: \"success\",\n        msg: \"Message sent\"\n      });\n    } else {\n      setStatus({\n        type: \"error\",\n        msg: \"Fail to sent message\"\n      });\n      console.log(error);\n    }\n  };\n\n  const clearMessages = async () => {\n    if (!activeKey) {\n      setStatus({\n        type: \"error\",\n        msg: \"No ChatBox selected\"\n      });\n      return;\n    }\n\n    const data = await clearMessage({\n      variables: {\n        chatBoxName: activeKey\n      }\n    });\n    const {\n      error\n    } = data;\n\n    if (!error) {\n      setStatus({\n        type: \"success\",\n        msg: \"Message clear\"\n      });\n    } else {\n      setStatus({\n        type: \"error\",\n        msg: \"Fail to clear message\"\n      });\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(StyledApp, {\n    children: signIn ? /*#__PURE__*/_jsxDEV(ChatRoom, {\n      me: me,\n      body: body,\n      setBody: setBody,\n      newChatUser: newChatUser,\n      setNewChatUser: setNewChatUser,\n      activeKey: activeKey,\n      setActiveKey: setActiveKey,\n      panes: panes,\n      setPanes: setPanes,\n      showModal: showModal,\n      setShowModal: setShowModal,\n      displayStatus: displayStatus,\n      sendMessage: sendMessage,\n      clearMessages: clearMessages,\n      createChatRoom: createChatRoom\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SignIn, {\n      me: me,\n      setMe: setMe,\n      setSignedIn: setSignedIn,\n      dislayStatus: displayStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8PMq71I4cNZPy16OmsXNrX500Aw=\", false, function () {\n  return [useChatRoom, useMutation, useMutation, useMutation];\n});\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"StyledApp\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/karnielaliao/Downloads/wp1101-main 3/hw9/frontend/src/Containers/App.js"],"names":["styled","useChatRoom","useEffect","useState","ChatRoom","SignIn","useMutation","CREATE_CHATBOX_MUTATION","CREATE_MESSAGE_MUTATION","CLEAR_MESSAGE_MUTATION","StyledApp","div","LOCALSTORAGE_KEY","App","savedMe","localStorage","getItem","status","setStatus","displayStatus","me","setMe","body","setBody","signIn","setSignedIn","newChatUser","setNewChatUser","activeKey","setActiveKey","panes","setPanes","showModal","setShowModal","createChatBox","createMessage","clearMessage","setItem","createChatRoom","data","variables","name1","name2","error","name","newPanes","push","title","key","unseen","type","msg","console","log","sendMessage","chatBoxName","sender","clearMessages"],"mappings":"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","sourcesContent":["import styled from 'styled-components'\nimport useChatRoom from '../Hooks/useChatRoom'\nimport { useEffect, useState } from 'react'\nimport ChatRoom from './ChatRoom'\nimport SignIn from './SignIn'\nimport { useMutation } from '@apollo/react-hooks'\nimport { CREATE_CHATBOX_MUTATION, CREATE_MESSAGE_MUTATION, CLEAR_MESSAGE_MUTATION} from '../graphql/index'\n\nconst StyledApp = styled.div`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\njustify-content: center;\nheight: 100vh;\nwidth: 500px;\nmargin: auto;\n`;\n\nconst LOCALSTORAGE_KEY = \"save-me\"\n\n\n\nfunction App() {\n  const savedMe = localStorage.getItem(LOCALSTORAGE_KEY)\n  const { status, setStatus, displayStatus } = useChatRoom()\n  const [me, setMe] = useState(savedMe || '')\n  const [body, setBody] = useState('') \n  const [signIn, setSignedIn] = useState(false)\n  const [newChatUser, setNewChatUser] = useState('')\n  const [activeKey, setActiveKey] = useState()\n  const [panes, setPanes] = useState([])\n  const [showModal, setShowModal] = useState(false)\n  const [createChatBox] = useMutation(CREATE_CHATBOX_MUTATION)\n  const [createMessage] = useMutation(CREATE_MESSAGE_MUTATION)\n  const [clearMessage] = useMutation(CLEAR_MESSAGE_MUTATION)\n  \n  useEffect( () => {displayStatus(status)}, [status])\n  useEffect( () => {\n    if (signIn) {\n      localStorage.setItem(LOCALSTORAGE_KEY, me)\n    }\n  }, [signIn, me])\n  \n  const createChatRoom = async () => {\n    if(!me || !newChatUser) return\n    const data = await createChatBox({\n      variables: {\n        name1: me,\n        name2: newChatUser\n      }\n    })\n\n    setShowModal(false)\n    setNewChatUser('')\n    \n    const {error, data:{createChatBox:{name}}} = data\n    if(!error){\n      const activeKey = name;\n      const newPanes = [...panes];\n\n      newPanes.push({ title: newChatUser, key: activeKey, unseen: 0});\n      setStatus({type: \"success\", msg: \"ChatBox created\"})\n      setPanes(newPanes)\n      setActiveKey(activeKey)\n      \n    }\n    else {\n      setStatus({type: \"error\", msg: \"Fail to create ChatBox\"})\n      console.log(error)\n    }\n    \n  }\n\n  const sendMessage = async (msg) => {\n    if(!activeKey){\n      setStatus({type: \"error\", msg: \"No ChatBox selected\"})\n      return;\n    } \n    const data = await createMessage({\n      variables:{\n        chatBoxName: activeKey,\n        sender: me,\n        body: msg\n      }\n    })\n    const {error} = data\n    if(!error){\n      setStatus({type: \"success\", msg: \"Message sent\"})\n    }\n    else {\n      setStatus({type: \"error\", msg: \"Fail to sent message\"})\n      console.log(error)\n    }\n  }\n\n  const clearMessages = async () => {\n    if(!activeKey){\n      setStatus({type: \"error\", msg: \"No ChatBox selected\"})\n      return;\n    } \n    \n    const data = await clearMessage({\n      variables:{\n        chatBoxName: activeKey,\n      }\n    })\n    const {error} = data\n    if(!error){\n      setStatus({type: \"success\", msg: \"Message clear\"})\n    }\n    else {\n      setStatus({type: \"error\", msg: \"Fail to clear message\"})\n      console.log(error)\n    }\n\n  }\n    \n  return (\n    <StyledApp>\n      {signIn?\n        <ChatRoom \n          me={me}\n          body={body}\n          setBody={setBody}\n          newChatUser={newChatUser}\n          setNewChatUser={setNewChatUser}\n          activeKey={activeKey}\n          setActiveKey={setActiveKey}\n          panes={panes}\n          setPanes={setPanes}\n          showModal={showModal}\n          setShowModal={setShowModal}\n          displayStatus={displayStatus}\n          sendMessage={sendMessage} \n          clearMessages={clearMessages}\n          createChatRoom={createChatRoom} />\n        :<SignIn\n          me={me}\n          setMe={setMe}\n          setSignedIn={setSignedIn} \n          dislayStatus={displayStatus}/>}\n    </StyledApp>\n  )\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}