{"ast":null,"code":"var _jsxFileName = \"/Users/karnielaliao/Downloads/wp1101-main 3/hw9/frontend/src/Containers/ChatBox.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { Tag, Divider, message } from 'antd';\nimport { useQuery, useSubscription } from '@apollo/client';\nimport { CHATBOX_QUERY, CHATBOXMESSAGES_SUBSCRIPTION } from '../graphql';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ChatBox = _ref => {\n  _s();\n\n  let {\n    me,\n    chatBoxName,\n    activeKey,\n    boxKey,\n    panes,\n    setPanes,\n    focused\n  } = _ref;\n  const {\n    loading,\n    data\n  } = useQuery(CHATBOX_QUERY, {\n    variables: {\n      chatBoxName: chatBoxName\n    }\n  });\n  useSubscription(CHATBOXMESSAGES_SUBSCRIPTION, {\n    variables: {\n      chatBoxName: chatBoxName\n    },\n    onSubscriptionData: _ref2 => {\n      let {\n        subscriptionData: {\n          data\n        }\n      } = _ref2;\n\n      if (data.chatBoxMessages.mutation === 'CREATED') {\n        const newMessage = data.chatBoxMessages.message;\n\n        if (activeKey === boxKey) {\n          setMessages(prev => [...prev, newMessage]);\n        } else {\n          setUnseenMessages(prev => [...prev, newMessage]);\n          var id = panes.findIndex(pane => {\n            return pane.key === boxKey;\n          });\n          const newPanes = JSON.parse(JSON.stringify(panes));\n          newPanes[id].unseen += 1;\n          setPanes(newPanes);\n        }\n      } else if (data.chatBoxMessages.mutation === 'CLEARED') {\n        setMessages([]);\n        setUnseenMessages([]);\n      }\n    }\n  });\n  const [messages, setMessages] = useState([]);\n  const [unseenMessages, setUnseenMessages] = useState([]);\n  useEffect(() => {\n    if (!loading) {\n      setMessages(data.chatBox.messages);\n    }\n  }, [loading]);\n  useEffect(() => {\n    if (boxKey === activeKey) {\n      var id = panes.findIndex(pane => {\n        return pane.key === boxKey;\n      });\n      const newPanes = JSON.parse(JSON.stringify(panes));\n      newPanes[id].unseen = 0;\n      setPanes(newPanes);\n    }\n  }, [activeKey]);\n  useEffect(() => {\n    if (focused === true) {\n      if (boxKey === activeKey) {\n        setMessages([...messages, ...unseenMessages]);\n        setUnseenMessages([]);\n        console.log([message, unseenMessages]);\n      }\n    }\n  }, [focused, activeKey]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [messages ? messages.map((_ref3, i) => {\n      let {\n        sender,\n        body\n      } = _ref3;\n\n      if (sender.name === me) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-message\",\n          align: \"right\",\n          children: [body + \" \", /*#__PURE__*/_jsxDEV(Tag, {\n            color: \"blue\",\n            children: sender.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 37\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-message\",\n          children: [/*#__PURE__*/_jsxDEV(Tag, {\n            color: \"blue\",\n            children: sender.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), body]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this);\n      }\n    }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), unseenMessages.length ? /*#__PURE__*/_jsxDEV(Divider, {\n      plain: true,\n      children: \"Unseen Messages\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), unseenMessages ? unseenMessages.map((_ref4, i) => {\n      let {\n        sender,\n        body\n      } = _ref4;\n\n      if (sender.name === me) {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-message\",\n          align: \"right\",\n          children: [body + \" \", /*#__PURE__*/_jsxDEV(Tag, {\n            color: \"blue\",\n            children: sender.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 37\n          }, this)]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"App-message\",\n          children: [/*#__PURE__*/_jsxDEV(Tag, {\n            color: \"blue\",\n            children: sender.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 25\n          }, this), body]\n        }, i, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this);\n      }\n    }) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n  }, void 0, true);\n};\n\n_s(ChatBox, \"cjVMi+eIV4desJFE2X9Xif8+yEM=\", false, function () {\n  return [useQuery, useSubscription];\n});\n\n_c = ChatBox;\nexport default ChatBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatBox\");","map":{"version":3,"sources":["/Users/karnielaliao/Downloads/wp1101-main 3/hw9/frontend/src/Containers/ChatBox.js"],"names":["useEffect","Tag","Divider","message","useQuery","useSubscription","CHATBOX_QUERY","CHATBOXMESSAGES_SUBSCRIPTION","useState","ChatBox","me","chatBoxName","activeKey","boxKey","panes","setPanes","focused","loading","data","variables","onSubscriptionData","subscriptionData","chatBoxMessages","mutation","newMessage","setMessages","prev","setUnseenMessages","id","findIndex","pane","key","newPanes","JSON","parse","stringify","unseen","messages","unseenMessages","chatBox","console","log","map","i","sender","body","name","length"],"mappings":"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","sourcesContent":["import { useEffect } from 'react'\nimport { Tag, Divider, message } from 'antd'\nimport { useQuery, useSubscription } from '@apollo/client'\nimport { CHATBOX_QUERY, CHATBOXMESSAGES_SUBSCRIPTION } from '../graphql'\nimport { useState } from 'react'\n\nconst ChatBox = ({me, chatBoxName, activeKey, boxKey, panes, setPanes, focused}) => {\n    \n    const { loading, data} = useQuery(CHATBOX_QUERY, {variables: {chatBoxName: chatBoxName}})\n    useSubscription(\n        CHATBOXMESSAGES_SUBSCRIPTION,\n        {\n            variables:{chatBoxName:chatBoxName},\n            onSubscriptionData: ({subscriptionData:{data}}) => {\n                if(data.chatBoxMessages.mutation === 'CREATED'){\n                    const newMessage = data.chatBoxMessages.message\n                    if(activeKey === boxKey){\n                        setMessages(prev => [...prev, newMessage])\n                    }\n                    else {\n                        setUnseenMessages(prev => [...prev, newMessage])\n                        var id = panes.findIndex(pane => {return pane.key === boxKey})\n                        const newPanes = JSON.parse(JSON.stringify(panes))\n                        newPanes[id].unseen += 1\n                        setPanes(newPanes)\n                        \n                    }\n\n                }\n                else if(data.chatBoxMessages.mutation === 'CLEARED'){\n                    setMessages([])\n                    setUnseenMessages([])\n                }\n            }\n        }\n    )\n    const [messages, setMessages] = useState([])\n    const [unseenMessages, setUnseenMessages] = useState([])\n\n    \n    useEffect( () => {\n        if(!loading){\n            setMessages(data.chatBox.messages)\n        }\n    }, [loading])\n\n    useEffect( () => {\n        if(boxKey === activeKey){\n            var id = panes.findIndex(pane => {return pane.key === boxKey})\n            const newPanes = JSON.parse(JSON.stringify(panes))\n            newPanes[id].unseen = 0\n            setPanes(newPanes)\n            \n        }\n\n    }, [activeKey])\n\n    useEffect( () => {\n        if(focused === true){\n            if(boxKey === activeKey){\n\n                setMessages([...messages, ...unseenMessages])\n                setUnseenMessages([])\n                console.log([message, unseenMessages])\n            }\n            \n        }\n    }, [focused, activeKey])\n\n    return (\n        <>\n        {messages?messages.map(({sender, body}, i) => { \n            if(sender.name === me){\n                return (\n                <p className=\"App-message\" key={i} align=\"right\">\n                        {body + \" \"}<Tag color = \"blue\">{sender.name}</Tag>\n                        </p>\n                )\n            } else {\n                return (<p className=\"App-message\" key={i}>\n                        <Tag color = \"blue\">{sender.name}</Tag>{body}\n                        </p>)\n        }}):<></>}\n        {unseenMessages.length?\n            <Divider plain>Unseen Messages</Divider>\n        :<></>}\n\n        {unseenMessages?unseenMessages.map(({sender, body}, i) => { \n            if(sender.name === me){\n                return (\n                <p className=\"App-message\" key={i} align=\"right\">\n                        {body + \" \"}<Tag color = \"blue\">{sender.name}</Tag>\n                        </p>\n                )\n            } else {\n                return (<p className=\"App-message\" key={i}>\n                        <Tag color = \"blue\">{sender.name}</Tag>{body}\n                        </p>)\n        }}):<></>}\n        </>\n       \n    )\n}\n\nexport default ChatBox"]},"metadata":{},"sourceType":"module"}